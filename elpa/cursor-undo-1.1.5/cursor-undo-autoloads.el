;;; cursor-undo-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from cursor-undo.el

(defvar cundo-enable-cursor-tracking nil "\
Global control flag to enable cursor undo tracking.")
(custom-autoload 'cundo-enable-cursor-tracking "cursor-undo" t)
(autoload 'cursor-undo "cursor-undo" "\
Global minor mode for tracking cursor undo.

This is a minor mode.  If called interactively, toggle the `cursor-Undo
mode' mode.  If the prefix argument is positive, enable the mode, and if
it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `cundo-enable-cursor-tracking'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'def-cursor-undo "cursor-undo" "\
Define an advice for FUNC-SYM to track cursor movements in the undo buffer.
The NO-COMBINE flag track each movement without combining the same
commands into a single undo record.  For example, multiple arrow key
movements like `right-chars' will be combined as a single undo operation
when NO-COMBINE is NIL.  Nested/reentering cursor-undo are prevented
using `cursor-tracking' and `cundo-enable-cursor-tracking' dynamic
variables.

Parameters:
  NO-COMBINE: (default NIL)
         Force adding an undo entry in undo buffer without combined with
         the previous command, if the previous command (`last-command')
         is the same as `this-command'.

  SCREEN-POS: (default NIL)
         Record window cursor relative position in undo buffer entry so
         that we can jump back undo editing and still having the cursor
         at the original relative position to the window.

  NO-MOVE: (default NIL)
         Add an undo entry even if cursor (`point') not moved.  For
         example, `recenter' won't move `point' but only the relative
         position of the cursor to the current window.

(fn FUNC-SYM &optional NO-COMBINE SCREEN-POS NO-MOVE)" nil t)
(register-definition-prefixes "cursor-undo" '("backward-" "beginning-of-buffer" "bookmark-jump" "brief-" "cua-resize-rectangle-" "cundo-" "disable-cursor-tracking" "end-of-buffer" "evil-" "forward-" "goto-line" "isearch-" "jump-to-register" "left-char" "mark-whole-buffer" "mwheel-scroll" "next-line" "previous-line" "recenter" "right-char" "scroll-" "undo" "viper-"))


;;; End of scraped data

(provide 'cursor-undo-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; cursor-undo-autoloads.el ends here
